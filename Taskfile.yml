version: "3"

includes:
  better-std:
    aliases: ["std"]
    taskfile: packages/std/
    dir: packages/std/
    optional: true # if not found, skip

  better-px:
    aliases: ["bx", "px"]
    taskfile: packages/px/
    dir: packages/px/
    optional: true # if not found, skip

  bpstd:
    taskfile: packages/bpstd/
    dir: packages/bpstd/
    optional: true #

################################################################################################

#
# global vars: https://taskfile.dev/#/usage?id=variables
#
vars:
  VAR1: "some-var"

# global env:
env:
  ENV1: testing

# env file:
dotenv:
  - .env

################################################################################################

tasks:
  init:env:
    cmds:
      - cp .env.local .env

  install:
    aliases: ["i"]
    cmds:
      - uv sync --all-packages --upgrade

  env:
    cmds:
      - echo "env"
      - echo "ENV1= $UV_PUBLISH_TOKEN"

  uv:
    aliases: ["pkg", "pm"]
    cmds:
      - uv {{.CLI_ARGS}}

  sync:
    cmds:
      # - uv self update
      - uv sync --all-packages --all-groups --upgrade
    ignore_error: true

  fmt:
    cmds:
      # - uv run ruff format . --config=pyproject.toml
      - uv run ruff check --fix . --config=pyproject.toml
      - uv run ruff check --fix . --config=pyproject.toml
      - uv run ruff format . --config=pyproject.toml
      # - uv run ruff format .
    ignore_error: true

  new:rs:
    aliases: ["n"]
    cmds:
      # - uv run maturin new --mixed --src {{.CLI_ARGS}} # pyrslib, o3lib
      - uvx maturin new --mixed --src {{.CLI_ARGS}} # pyrslib, o3lib
    dir: packages/

  docs:
    cmds:
      - uv sync --all-packages --all-groups
      - uv run mkdocs serve --open --watch=docs --watch=mkdocs.yml --dev-addr=localhost:5004

  docs:deploy:
    aliases: ["docs:d"]
    cmds:
      - task: sync
      - uv run mkdocs gh-deploy # build and create gh-pages branch
      - git push origin gh-pages:gh-pages --force # push to public repo

  build:
    aliases: ["b"]
    cmds:
      - echo "build"
      - uv build
    ignore_error: true

  publish:fix:
    aliases: ["pf"]
    cmds:
      # dist 下文件, _ 改为 -
      - echo "fix dist files"
      - |
        for file in `ls .`; do
          new_file=`echo $file | sed 's/_/-/g'`
          if [ "$file" != "$new_file" ]; then
            echo "rename $file to $new_file"
            mv $file $new_file
          fi
        done
      - open .
    dir: ./dist
    ignore_error: true

  publish:
    aliases: ["pub", "up"]
    cmds:
      # dist 下文件, _ 改为 -
      # - task: publish:fix
      - uv publish
    ignore_error: true

  clean:
    aliases: ["cl"]
    cmds:
      - echo "clean all"
      - find packages/ -name "*.pyc" -exec rm -rf {} \;
      - find packages/ -name "__pycache__" -exec rm -rf {} \;
      - find packages/ -name "*.egg-info" -exec rm -rf {} \;
      - find packages/ -name "*.dist-info" -exec rm -rf {} \;
      - find packages/ -name "*.so" -exec rm -rf {} \;
      - find packages/ -name "*.pyd" -exec rm -rf {} \;
      - find packages/ -name "*.dll" -exec rm -rf {} \;
      - find packages/ -name "*.dylib" -exec rm -rf {} \;
      - find packages/ -name "*.lib" -exec rm -rf {} \;

      - rm -rf ./.tox
      - rm -rf ./.pytest_cache
      - rm -rf ./__pycache__
      - rm -rf ./build
      - rm -rf ./dist
      - rm -rf ./*.egg-info
      - rm -rf ./coverage.xml
      - rm -rf ./coverage_html_report
      - rm -rf ./coverage_html_report.zip
    ignore_error: true

  ##################################################################################################

  quick:
    aliases: ["q"]
    cmds:
      - task: cc
      - task: push

  # usage: task rc -- 2
  cf:
    aliases: ["reset:commit", "rc"]
    cmds:
      - git reset --soft HEAD~{{.CLI_ARGS}}
      - task: c

  cc:
    cmds:
      - task: commit
      - task: commit

  commit:
    aliases: ["c"]
    cmds:
      - git add .
      - git status
      - git commit -m "update" --no-verify
    ignore_error: true

  pull:
    cmds:
      - git config pull.rebase false
      - git pull origin main

  push:
    cmds:
      - git push origin main --tags
      - repo_url=`git remote -v | grep push | awk -F ":" '{print $2}' | awk -F ".git" '{print "https://github.com/"$1}'`; open $repo_url
